/*
** $Log: lens_drv.h $
 *
*/

#ifndef _LENS_DRV_H_
#define _LENS_DRV_H_

#include <utils/threads.h>

using namespace android;

extern "C" {
#include <pthread.h>
#include <semaphore.h>
}


/*******************************************************************************
*
********************************************************************************/
class LensDrv : public MCUDrv
{
private:    //// Instanciation outside is disallowed.
    /////////////////////////////////////////////////////////////////////////
    //
    // LensDrv () -
    //! \brief
    //
    /////////////////////////////////////////////////////////////////////////                       
    LensDrv();

    /////////////////////////////////////////////////////////////////////////
    //
    // ~LensDrv () -
    //! \brief
    //
    /////////////////////////////////////////////////////////////////////////    
    virtual ~LensDrv();

public:     //// Interfaces
    /////////////////////////////////////////////////////////////////////////
    //
    /////////////////////////////////////////////////////////////////////////
    static MCUDrv* getInstance();

    /////////////////////////////////////////////////////////////////////////
    //
    /////////////////////////////////////////////////////////////////////////
    virtual void destroyInstance();

    /////////////////////////////////////////////////////////////////////////
    //
    // init () -
    //! \brief 
    //
    /////////////////////////////////////////////////////////////////////////    
    virtual int init();

    /////////////////////////////////////////////////////////////////////////
    //
    // uninit () -
    //! \brief 
    //
    /////////////////////////////////////////////////////////////////////////    
    virtual int uninit();

    /////////////////////////////////////////////////////////////////////////
    //
    // moveMCU () -
    //! \brief 
    //
    /////////////////////////////////////////////////////////////////////////    
    virtual int moveMCU(int a_i4FocusPos);

    /////////////////////////////////////////////////////////////////////////
    //
    // getMCUInfo () -
    //! \brief 
    //
    /////////////////////////////////////////////////////////////////////////    
    virtual int  getMCUInfo(mcuMotorInfo *a_pMotorInfo);

    /////////////////////////////////////////////////////////////////////////
    //
    // setMCUInfPos () -
    //! \brief 
    //
    /////////////////////////////////////////////////////////////////////////    
    virtual int setMCUInfPos(int a_i4FocusPos);

    /////////////////////////////////////////////////////////////////////////
    //
    // setMCUMacroPos () -
    //! \brief 
    //
    /////////////////////////////////////////////////////////////////////////    
    virtual int setMCUMacroPos(int a_i4FocusPos);

private:
    //
    int             m_fdMCU;
    int             m_userCnt; 
    mutable Mutex mLock;    

};

#endif  //  _LENS_DRV_H_

